Candidate Elimination

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, roc_curve, auc

df = pd.read_csv('/content/bank-additional-full.csv', sep=';')

df['y'] = df['y'].map({'no': 0, 'yes': 1})

df = df.dropna()

features = ['age', 'job', 'marital', 'education', 'default', 'housing', 'loan', 'duration']
X = df[features]
y = df['y']

from sklearn.preprocessing import LabelEncoder
cat_cols = ['job', 'marital', 'education', 'default', 'housing', 'loan']
for col in cat_cols:
    le = LabelEncoder()
    X[col] = le.fit_transform(X[col])

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, stratify=y, random_state=42)

# Candidate Elimination simplified (Find-S style)
def candidate_elimination(X_train, y_train):
    ce_features = ['job', 'marital', 'education', 'default', 'housing', 'loan']
    pos_data = X_train[y_train == 1][ce_features].reset_index(drop=True)
    hypothesis = pos_data.loc[0].copy()
    for i in range(1, len(pos_data)):
        for feature in ce_features:
            if hypothesis[feature] != pos_data.loc[i, feature]:
                hypothesis[feature] = '?'
    return hypothesis

def predict_ce(hypothesis, X_test):
    ce_features = hypothesis.index.tolist()
    y_pred = []
    for idx, row in X_test.iterrows():
        match = True
        for feature in ce_features:
            if hypothesis[feature] != '?' and hypothesis[feature] != row[feature]:
                match = False
                break
        y_pred.append(1 if match else 0)
    return np.array(y_pred)

hypothesis = candidate_elimination(X_train, y_train)
y_pred = predict_ce(hypothesis, X_test)
y_prob = y_pred  # For ROC approx

# Visualization functions
def plot_histogram():
    plt.hist(df['age'], bins=30, color='#FF9999', edgecolor='black')
    plt.title('Histogram of Age')
    plt.xlabel('Age')
    plt.ylabel('Frequency')
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.show()

def plot_class_dist():
    sns.countplot(x='y', data=df, palette='Set2')
    plt.title('Class Distribution')
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.show()

def plot_conf_matrix(y_true, y_pred, algo):
    cm = confusion_matrix(y_true, y_pred)
    sns.heatmap(cm, annot=True, fmt='d', cmap='YlGnBu')
    plt.title(f'Confusion Matrix - {algo}')
    plt.xlabel('Predicted')
    plt.ylabel('Actual')
    plt.show()

def plot_roc(y_true, y_prob, algo):
    fpr, tpr, _ = roc_curve(y_true, y_prob)
    roc_auc = auc(fpr, tpr)
    plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'AUC = {roc_auc:.2f}')
    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
    plt.title(f'ROC Curve - {algo}')
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.legend(loc='lower right')
    plt.grid(True)
    plt.show()

def plot_actual_vs_pred(y_true, y_pred, algo_name):
    n_samples = min(20000, len(y_true))
    plt.figure(figsize=(15, 4))
    plt.plot(range(n_samples), y_true.values[:n_samples], label='Actual', color='#66C2A5', alpha=0.7)
    plt.plot(range(n_samples), y_pred[:n_samples], label='Predicted', color='#FC8D62', alpha=0.7)
    plt.title(f'Actual vs Predicted (first 20,000 samples) - {algo_name}')
    plt.xlabel('Sample Index')
    plt.ylabel('Class Label')
    plt.legend()
    plt.grid(True)
    plt.show()

# Plots
plot_histogram()
plot_class_dist()
plot_conf_matrix(y_test, y_pred, "Candidate Elimination")
plot_roc(y_test, y_prob, "Candidate Elimination")
plot_actual_vs_pred(y_test, y_pred, "Candidate Elimination")
