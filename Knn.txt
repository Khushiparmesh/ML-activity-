Knn


import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix, roc_curve, auc
from sklearn.preprocessing import LabelEncoder, StandardScaler

df = pd.read_csv('/content/bank-additional-full.csv', sep=';')
df['y'] = df['y'].map({'no': 0, 'yes': 1})
df = df.dropna()

features = ['age', 'job', 'marital', 'education', 'default', 'housing', 'loan', 'duration']
X = df[features]
y = df['y']

cat_cols = ['job', 'marital', 'education', 'default', 'housing', 'loan']
for col in cat_cols:
    le = LabelEncoder()
    X[col] = le.fit_transform(X[col])

# Scale features for KNN
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y, test_size=0.3, stratify=y, random_state=42)

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)
y_pred = knn.predict(X_test)
y_prob = knn.predict_proba(X_test)[:, 1]

# Visualization functions with enhanced colors
def plot_histogram():
    plt.hist(df['age'], bins=30, color='#FFD700', edgecolor='black')  # Gold
    plt.title('Histogram of Age')
    plt.xlabel('Age')
    plt.ylabel('Frequency')
    plt.grid(axis='y', linestyle='--', alpha=0.6)
    plt.show()

def plot_class_dist():
    sns.countplot(x='y', data=df, palette='husl')  # Vibrant palette
    plt.title('Class Distribution')
    plt.grid(axis='y', linestyle='--', alpha=0.6)
    plt.show()

def plot_conf_matrix(y_true, y_pred):
    cm = confusion_matrix(y_true, y_pred)
    sns.heatmap(cm, annot=True, fmt='d', cmap='PuBuGn')  # Teal-green tones
    plt.title('Confusion Matrix - KNN')
    plt.xlabel('Predicted')
    plt.ylabel('Actual')
    plt.show()

def plot_roc(y_true, y_prob):
    fpr, tpr, _ = roc_curve(y_true, y_prob)
    roc_auc = auc(fpr, tpr)
    plt.plot(fpr, tpr, label=f'AUC = {roc_auc:.2f}', color='#D62728', lw=2)  # Red
    plt.plot([0, 1], [0, 1], '--', color='gray')
    plt.title('ROC Curve - KNN')
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.legend(loc='lower right')
    plt.grid(True)
    plt.show()

def plot_actual_vs_pred(y_true, y_pred, algo_name):
    n_samples = min(20000, len(y_true))
    plt.figure(figsize=(15, 4))
    plt.plot(range(n_samples), y_true.values[:n_samples], label='Actual', color='#2CA02C', alpha=0.7)  # Green
    plt.plot(range(n_samples), y_pred[:n_samples], label='Predicted', color='#1F77B4', alpha=0.7)  # Blue
    plt.title(f'Actual vs Predicted (first 20,000 samples) - {algo_name}')
    plt.xlabel('Sample Index')
    plt.ylabel('Class Label')
    plt.legend()
    plt.grid(True)
    plt.show()

# Plots
plot_histogram()
plot_class_dist()
plot_conf_matrix(y_test, y_pred)
plot_roc(y_test, y_prob)
plot_actual_vs_pred(y_test, y_pred, "K-Nearest Neighbors")
